// <auto-generated />
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(TasksDbContext))]
    [Migration("20220514180112_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.15");

            modelBuilder.Entity("DataAccess.Models.TaskDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDone = false,
                            TaskName = "Docker"
                        },
                        new
                        {
                            Id = 2,
                            IsDone = true,
                            TaskName = "ToDo App"
                        },
                        new
                        {
                            Id = 3,
                            IsDone = false,
                            TaskName = "Something"
                        },
                        new
                        {
                            Id = 4,
                            IsDone = false,
                            TaskName = "Bread"
                        },
                        new
                        {
                            Id = 5,
                            IsDone = false,
                            TaskName = "Eggs"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.TaskGroupDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskGroupName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TaskGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TaskGroupName = "Homework"
                        },
                        new
                        {
                            Id = 2,
                            TaskGroupName = "To Buy"
                        });
                });

            modelBuilder.Entity("DataAccess.Models.ToDoDb", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId", "TaskGroupId");

                    b.ToTable("ToDos");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            TaskGroupId = 1
                        },
                        new
                        {
                            TaskId = 2,
                            TaskGroupId = 1
                        },
                        new
                        {
                            TaskId = 3,
                            TaskGroupId = 1
                        },
                        new
                        {
                            TaskId = 4,
                            TaskGroupId = 2
                        },
                        new
                        {
                            TaskId = 5,
                            TaskGroupId = 2
                        });
                });

            modelBuilder.Entity("TaskDbToDoDb", b =>
                {
                    b.Property<int>("TasksId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToDosTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToDosTaskGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TasksId", "ToDosTaskId", "ToDosTaskGroupId");

                    b.HasIndex("ToDosTaskId", "ToDosTaskGroupId");

                    b.ToTable("TaskDbToDoDb");
                });

            modelBuilder.Entity("TaskGroupDbToDoDb", b =>
                {
                    b.Property<int>("TaskGroupsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToDosTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToDosTaskGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskGroupsId", "ToDosTaskId", "ToDosTaskGroupId");

                    b.HasIndex("ToDosTaskId", "ToDosTaskGroupId");

                    b.ToTable("TaskGroupDbToDoDb");
                });

            modelBuilder.Entity("TaskDbToDoDb", b =>
                {
                    b.HasOne("DataAccess.Models.TaskDb", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ToDoDb", null)
                        .WithMany()
                        .HasForeignKey("ToDosTaskId", "ToDosTaskGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskGroupDbToDoDb", b =>
                {
                    b.HasOne("DataAccess.Models.TaskGroupDb", null)
                        .WithMany()
                        .HasForeignKey("TaskGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Models.ToDoDb", null)
                        .WithMany()
                        .HasForeignKey("ToDosTaskId", "ToDosTaskGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
